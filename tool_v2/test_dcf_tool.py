import unittestfrom unittest.mock import patch, mock_openimport h5pyimport unit_conversions as ucimport dcf_tool as dcfimport numpy as npimport pandas as pddcffile = h5py.File('DCFfile.h5', 'r')testpath = '/ICRP116/neutrons/LLAT'test_class = dcf.read_hdf5(dcffile, '/ICRP116/full_body/neutrons/RLAT', 'ICRP116',                           'full_body', 'neutrons', 'RLAT')class TestFuncs(unittest.TestCase):    def test_convert(self):        test_array = [0, 1, 2]        self.assertEqual(dcf.convert(uc.milli, test_array), [0, 1000, 2000])    def test_check_dcf_units(self):        data = pd.DataFrame(dcffile.get(testpath), columns=['E', 'DCF']).reset_index(drop=True)        dose = np.array(data['DCF'])        self.assertRaises(ValueError, dcf.check_dcf_units, 'nSv/s per particle/m2/minute', 'microSv/h per particle/cm2/s', dose)        self.assertRaises(ValueError, dcf.check_dcf_units, 'pSv cm2', 'nSv/s per particle/m2/minute', dose)        self.assertRaises(ValueError, dcf.check_dcf_units, 'microSv/hour per particle/cm2/s', 'nSv/s per particle/m2/minute', dose)        self.assertRaises(ValueError, dcf.check_dcf_units, 'rem/hour per particle/cm2/s', 'nSv/s per particle/m2/minute', dose)    def test_check(self):        self.assertRaises(ValueError, dcf.check, dcffile, 'ESSS', 'full_body', 'photons', 'ISO',                          'microSv/h per particle/cm2/s')        self.assertRaises(ValueError, dcf.check, dcffile, 'ESS', 'full_body', 'protons', 'ISO',                          'microSv/h per particle/cm2/s')        self.assertRaises(ValueError, dcf.check, dcffile, 'ESS', 'full_body', 'photons', 'LLAT',                          'microSv/h per particle/cm2/s')        self.assertRaises(ValueError, dcf.check, dcffile, 'ESS', 'full_body', 'photons', 'ISO',                          'nSv/s per particle/m2/minute')        self.assertRaises(ValueError, dcf.check, dcffile, 'NCRP38', 'full_body', 'photons', 'ISO',                          'microSv/h per particle/cm2/s')        self.assertRaises(ValueError, dcf.check, dcffile, 'NCRP38', 'full_body', 'neutrons', 'LLAT',                          'microSv/h per particle/cm2/s')        self.assertRaises(ValueError, dcf.check, dcffile, 'ICRP116', 'full_body', 'quarks', 'LLAT',                          'microSv/h per particle/cm2/s')        self.assertRaises(ValueError, dcf.check, dcffile, 'ICRP116', 'full_body', 'protons',                          'ROTATION', 'microSv/h per particle/cm2/s')        self.assertRaises(ValueError, dcf.check, dcffile, 'ICRP116', 'full_body', 'electrons',                          'LLAT', 'microSv/h per particle/cm2/s')        dcf_object = dcf.check(dcffile, 'ESS', 'full_body', 'photons', 'ISO',                               'microSv/h per particle/cm2/s')        self.assertEqual(dcf_object.data.shape, (55, 2))        self.assertEqual(list(dcf_object.data.columns), ['E', 'DCF'])        self.assertEqual(dcf_object.data['E'].iloc[0], 0.01)        self.assertEqual(dcf_object.data['E'].iloc[54], 1E4)        self.assertEqual(dcf_object.data['DCF'].iloc[0], 2.47E-4)        self.assertEqual(dcf_object.data['DCF'].iloc[54], 0.994)    def test_read_hdf5(self):        self.assertEqual(test_class.group, 'ICRP116')        self.assertEqual(test_class.organ, 'full_body')        self.assertEqual(test_class.particle, 'neutrons')        self.assertEqual(test_class.orientation, 'RLAT')        self.assertEqual(test_class.e_units, 'MeV')        self.assertEqual(test_class.dcf_units, 'pSv cm2')        # Data content is tested in test_check    def test_output_mcnp_format(self):        open_mock = mock_open()        with patch("builtins.open", open_mock, create=True):            dcf.output_mcnp_format(test_class)        open_mock.assert_called_with("ICRP116_full_body_neutrons_RLAT_MCNP .txt", "w")if __name__ == '__main__':    unittest.main()dcffile.close()