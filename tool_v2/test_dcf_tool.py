import unittestfrom unittest.mock import patch, mock_openimport h5pyimport unit_conversions as ucimport mcnp_argparse_v2 as mcnpimport numpy as npdcffile = h5py.File('DCFfile.h5', 'r')class TestFuncs(unittest.TestCase):        def test_rem_to_microsv(self):        self.assertEqual(mcnp.rem_to_microsv(1), 1E4)        def test_psv_cm2_to_microsv_hour(self):        self.assertEqual(mcnp.psv_cm2_to_microsv_hour(1), 3.6E-3)            def test_check(self):        self.assertRaises(ValueError, mcnp.check, dcffile, 'ESSS', 'photons', 'ISO')        self.assertRaises(ValueError, mcnp.check, dcffile, 'ESS', 'protons', 'ISO')        self.assertRaises(ValueError, mcnp.check, dcffile, 'ESS', 'photons', 'LLAT')        self.assertRaises(ValueError, mcnp.check, dcffile, 'NCRP38', 'photons', 'ISO')        self.assertRaises(ValueError, mcnp.check, dcffile, 'NCRP38', 'neutrons', 'LLAT')        self.assertRaises(ValueError, mcnp.check, dcffile, 'ICRP116', 'quarks', 'LLAT')        self.assertRaises(ValueError, mcnp.check, dcffile, 'ICRP116', 'protons', 'ROTATION')        self.assertRaises(ValueError, mcnp.check, dcffile, 'ICRP116', 'electrons', 'LLAT')        data = mcnp.check(dcffile, 'ESS', 'photons', 'ISO')        self.assertEqual(data.shape, (55, 2))        self.assertEqual(list(data.columns), ['E (MeV)', 'DCF (microSv/h per n/cm2/s)'])        self.assertEqual(data['E (MeV)'].iloc[0], 0.01)        self.assertEqual(data['E (MeV)'].iloc[54], 1E4)        self.assertEqual(data['DCF (microSv/h per n/cm2/s)'].iloc[0], 2.47E-4)        self.assertEqual(data['DCF (microSv/h per n/cm2/s)'].iloc[54], 0.994)        if __name__ == '__main__':    unittest.main()dcffile.close()